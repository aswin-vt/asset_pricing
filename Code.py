# -*- coding: utf-8 -*-
"""RTSM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pqWG5n2_gm8TblYKyKAgd8RO078-3k__
"""

# Importing the necessary libraries

import pandas as pd
import numpy as np
import statsmodels.formula.api as sm
from pandas_datareader.famafrench import get_available_datasets
from pandas_datareader import data as web
import matplotlib.pyplot as plt
from statsmodels.tools.eval_measures import rmse, meanabs
import statsmodels.api as sms
from statsmodels.stats import diagnostic as dia

tickers_list = ["SPY", "AAPL", "AMZN", "MSFT", "GOOGL"]

# Fetch the stock data
import yfinance as yf
data = yf.download(tickers_list,'2015-1-1', '2023-12-31')['Adj Close']

# Print first 5 rows of the data
data.head()

# Calculating the returns of the stocks.
returns = np.log(data/data.shift(1))

# Dropping the first row with NAN values
returns.drop('2015-01-02', axis = 0, inplace=True)

"""### **Modelling**"""

# Fitting a simple CAPM model
simple = sm.ols(formula = 'AMZN ~ SPY', data = returns).fit()
print(simple.summary())

# Fitting a multiple linear regression model with 5 related stocks.
model = sm.ols(formula = 'AMZN ~ SPY + AAPL + GOOGL + MSFT', data = returns).fit()
print(model.summary())

# Plotting the residuals. Follows a Normal Distribution
plt.figure()
model.resid.plot.density()
plt.show()

# Reading Fama Factors data for the specified time period.
start = pd.Timestamp('2015-01-05')
end = pd.Timestamp('2023-12-31')

ff_factor = 'F-F_Research_Data_5_Factors_2x3_daily'
ff_factor_data = web.DataReader(ff_factor, 'famafrench', start=start, end=end)[0]

ff_factor_data.rename(columns = {'Mkt-RF':'MKT'}, inplace=True)

# Creating a combined dataframe that has both stock returns and FAMA Factors
combined = pd.concat([returns, ff_factor_data], axis=1)

# Fama-French 3-factor model
fama3_model = sm.ols(formula = 'AMZN~MKT+SMB+HML', data = combined).fit()
print(fama3_model.summary())

# Plotting residuals. Follows a normal distribution.
plt.figure()
fama3_model.resid.plot.density()
plt.show()

# Fama-French 5-factor model.
fama5_model = sm.ols(formula = 'AMZN~MKT+SMB+HML+RMW+CMA', data = combined).fit()
print(fama5_model.summary())

# Plotting residuals. Follows a normal distribution.
plt.figure()
fama5_model.resid.plot.density()
plt.show()

# Combined model with all stock returns and Fama factors.
combined_model = sm.ols(formula = 'AMZN~MKT+SMB+HML+RMW+CMA+AAPL+GOOGL+MSFT', data = combined).fit()
print(combined_model.summary())

# Plotting the residuals. Follows a normal distribution.
plt.figure()
combined_model.resid.plot.density()
plt.show()

# Plotting the last 20 return points predicted by each model along with the actual returns.
result = pd.DataFrame({'simple regression': model.predict()[-20:],
                       'fama3_french': fama3_model.predict()[-20:],
                       'fama5_french': fama5_model.predict()[-20:],
                       'combined': combined_model.predict()[-20:],
                       'sample': combined["AMZN"]}, index = combined.index[-20:])

# Feel free to adjust the chart size
plt.figure(figsize=(15, 7.5))
plt.plot(result['2023-12-01':'2023-12-29'].index, result.loc['2023-12-01':'2023-12-29', 'simple regression'], label='Simple Regression')
plt.plot(result['2023-12-01':'2023-12-29'].index, result.loc['2023-12-01':'2023-12-29', 'fama3_french'], label='Fama 3-Factor Model')
plt.plot(result['2023-12-01':'2023-12-29'].index, result.loc['2023-12-01':'2023-12-29', 'fama5_french'], label='Fama 5-Factor Model')
plt.plot(result['2023-12-01':'2023-12-29'].index, result.loc['2023-12-01':'2023-12-29', 'combined'], label='Combined Model')
plt.plot(result['2023-12-01':'2023-12-29'].index, result.loc['2023-12-01':'2023-12-29', 'sample'], label='Sample')
plt.legend(fontsize="x-large")
plt.show()

"""##**Testing**"""

# Getting the stock data from 2024 for testing.
test_data = yf.download(tickers_list,'2023-12-29', '2024-3-31')['Adj Close']

# Calculating the returns.
test_returns = np.log(test_data/test_data.shift(1))

# Dropping the first row.
test_returns.drop('2023-12-29', axis=0, inplace=True)

# Reading the Fama-French factors till end of february. (Latest data available)
start = pd.Timestamp('2024-01-01')
end = pd.Timestamp('2024-02-29')

ff_factor = 'F-F_Research_Data_5_Factors_2x3_daily'
test_factors = web.DataReader(ff_factor, 'famafrench', start=start, end=end)[0]

# Combining the data like before.
combined_test = pd.concat([test_returns[test_returns.index <= '2024-02-29'], test_factors], axis=1)
combined_test.rename({'Mkt-RF': 'MKT'}, axis = 1, inplace=True)

def evaluate(model, test):
  # Function predicts the return for the testing data and the specified model.
  preds = model.predict(test)

  # Prints RMSE and MAE for the predictions.
  print('RMSE: ', rmse(preds, test['AMZN']))
  print('MAE: ', meanabs(preds, test['AMZN']))

  # Plotting the predictions along with the actual returns.
  plt.figure(figsize=(15, 5))
  plt.plot(test.index, preds, label='Predictions')
  plt.plot(test.index, test['AMZN'], label='Actual')
  plt.legend()
  plt.show()

# CAPM model.
evaluate(simple, test_returns)

# MLR with stock returns as regressors.
evaluate(model, test_returns)

# Fama-French 3-factor model
evaluate(fama3_model, combined_test)

# Fama-French 5-factor model
evaluate(fama5_model, combined_test)

# Combined model
evaluate(combined_model, combined_test)

"""### **Homoscedasticity**"""

# Plotting residuals along SPY market returns to look for homoscedasticity
plt.figure(figsize = (10,5))
plt.scatter(returns["SPY"],simple.resid)
plt.axhline(0.05)
plt.axhline(-0.05)
plt.xlabel('x value')
plt.ylabel('residual')
plt.show()

def check_heteroscedascticity(model, data):
  # The function prints the P-value from Breusch Pagan model.
  exog_with_const = sms.add_constant(data)
  # Perform Breusch-Pagan test
  het = dia.het_breuschpagan(model.resid, exog_with_const)
  print(f'p-value: {het[-1]}')

# Simple model
check_heteroscedascticity(simple,combined["SPY"])

# MLR model with stock returns as regressors.
check_heteroscedascticity(model, combined[["SPY", "AAPL", "GOOGL", "MSFT"]])

# Fama-French 3-factor model
check_heteroscedascticity(fama3_model, combined[["MKT", "SMB", "HML"]])

# Fama-French 5-factor model
check_heteroscedascticity(fama5_model, combined[["MKT", "SMB", "HML", "RMW", "CMA"]])

# Combined model.
check_heteroscedascticity(combined_model, combined.drop(['AMZN', "SPY"], axis = 1))

combined.to_csv('data.csv')

combined_test.to_csv('test_data.csv')

